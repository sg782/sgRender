#version 460
/*
to draw triangle:

- depth buffer
- face buffer
- vertice buffer
- current position (to calculate depth)
- screen dimensions
- color buffer
*/




layout(push_constant) uniform PushConstants {
    float screen_width;
    float screen_height;
    float roll;
    float pitch;
    float yaw;
    float x;
    float y;
    float z;
} push;


layout(set = 0, binding = 0) buffer Faces {
    // first 3 values are vertex indices (relative to mesh), 
    // last value is the idx of the mesh
    uvec4 ids[];
} faces;

layout(set = 0, binding = 1) buffer RunningVerticeCount{
    uint data[];
} running_vertice_count;

layout(set = 0, binding = 2) buffer InView {
    uint data[];
} in_view;

layout(set = 0, binding = 3) buffer VertexData {
    vec4 data[];
} vertex_data;

layout(set = 0, binding = 4) buffer DepthBuffer {
    float data[];
} depth_buffer;

layout(set = 0, binding = 5, rgba8) uniform writeonly image2D img;

// add in color buffer

void main() {
    uvec4 id = faces.ids[0];
    uint i = running_vertice_count.data[0] + int(push.screen_width+push.screen_height) ;
    uint j = in_view.data[0];
    vec4 k = vertex_data.data[0];
    float d = depth_buffer.data[0];

   // float t = push.current_heading[0];
    //float q = push.current_position[0];

    vec4 to_write = vec4(vec3(0.0,1.,1.0), 1.0);
    imageStore(img, ivec2(0,0), to_write);
}
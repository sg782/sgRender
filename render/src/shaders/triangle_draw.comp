#version 460
/*
to draw triangle:

- depth buffer
- face buffer
- vertice buffer
- current position (to calculate depth)
- screen dimensions
- color buffer
https://fgiesen.wordpress.com/2011/07/06/a-trip-through-the-graphics-pipeline-2011-part-6/
https://www.youtube.com/watch?v=k5wtuKWmV48&t=3454s


https://blog.imaginationtech.com/a-look-at-the-powervr-graphics-architecture-tile-based-rendering/
*/

layout(local_size_x = 16, local_size_y = 16) in;

layout(push_constant) uniform PushConstants {
    highp float screen_width;
    highp float screen_height;
    highp float heading_x;
    highp float heading_y;
    highp float heading_z;
    highp float x;
    highp float y;
    highp float z;
} push;


layout(set = 0, binding = 0) buffer Faces {
    // first 3 values are vertex indices (relative to mesh), 
    // last value is the idx of the mesh
    uvec4 ids[];
} faces;

layout(set = 0, binding = 1) buffer RunningVerticeCount{
    uint data[];
} running_vertice_count;

layout(set = 0, binding = 2) buffer InView {
    uint data[];
} in_view;

layout(set = 0, binding = 3) buffer TransformedVertexData {
    vec4 data[];
} transformed_vertex_data;

layout(set = 0, binding = 4) buffer DepthBuffer {
    // highp float data[];
    uint data[];
} depth_buffer;

layout(set = 0, binding = 5) buffer ColorBuffer {
    uint data[];
} color_buffer;

layout(set = 0, binding = 6) buffer FaceNormalBuffer{
    vec4 data[];
} normal_buffer;

layout(set = 0, binding = 7) buffer VertexData{
    vec4 data[];
} initial_vertex_data;

layout(set = 0, binding = 8) buffer PointLightData{
    vec4 data[];
} point_light_data;

layout(set = 0, binding = 9, rgba8) uniform writeonly image2D img;

// add in color buffer


void sort_counter_clockwise(in vec4 v[3], out vec4 v_out[3]){
    const highp float PI = 3.141592653;

    // center x and y
    vec2 center = vec2(
        (v[0][0] + v[1][0] + v[2][0]) / 3.,
        (v[0][1] + v[1][1] + v[2][1]) / 3.
    );

    highp float angle_0 = atan(v[0][1] - center[1], v[0][0] - center[0]);
    highp float angle_1 = atan(v[1][1] - center[1], v[1][0] - center[0]);
    highp float angle_2 = atan(v[2][1] - center[1], v[2][0] - center[0]);


    vec3 angles = vec3(angle_0,angle_1,angle_2);
    vec3 shifted_angles = vec3(0.);

    for(int i=0;i<3;i++){
        if(angles[i] >= 0){
            shifted_angles[i] = PI  - angles[i];
        }else{
            shifted_angles[i] = - PI - angles[i];
        }
    }

    highp float max_theta = 3.141592;
    highp float min_theta = -3.141592;

    uint cv0_idx = 0;
    uint cv2_idx = 2;

    for(int i=0;i<3;i++){
        if(shifted_angles[i] > min_theta){
            cv2_idx = i;
            min_theta = shifted_angles[i];
        }
        if(shifted_angles[i] < max_theta){
            cv0_idx = i;
            max_theta = shifted_angles[i];
        }
    }

    //uint cv1_idx = 3 - cv0_idx - cv2_idx;
    uint cv1_idx = (cv0_idx != 0 && cv2_idx != 0) ? 0 :
                   (cv0_idx != 1 && cv2_idx != 1) ? 1 : 2;


    v_out[0] = v[cv0_idx];
    v_out[1] = v[cv1_idx];
    v_out[2] = v[cv2_idx];

    return;
}

highp float get_determinant(vec2 a, vec2 b, vec2 c){
    vec2 ab = b - a;
    vec2 ac = c - a;

    highp float det = (ab[1] * ac[0]) - (ab[0] * ac[1]);
    return det;
}


void draw_full_half_space_triangle(vec4 v0, vec4 v1, vec4 v2, uint face_id, highp float light_intensity){
    highp float min_x = min(v0[0],min(v1[0],v2[0]));
    highp float max_x = max(v0[0],max(v1[0],v2[0]));

    highp float min_y = min(v0[1],min(v1[1],v2[1]));
    highp float max_y = max(v0[1],max(v1[1],v2[1]));

    // three points define a plane
    vec3 v_top = vec3(v0.xy,v0.w);
    vec3 v_left = vec3(v1.xy,v1.w);
    vec3 v_right = vec3(v2.xy,v2.w);
    vec3 a = v_left - v_top;
    vec3 b = v_right - v_top;

    vec3 screen_normal = normalize(cross(b,a)); // cull from here



    
    highp float dz_dy = (screen_normal.z != 0) ? (-screen_normal.y / screen_normal.z) : 0.0f;
    highp float dz_dx = (screen_normal.z != 0) ? (-screen_normal.x / screen_normal.z) : 0.0f;



    uint c = color_buffer.data[face_id];

    // extract each color data
    vec4 color = uvec4(
        float((c >> 16) & 0xFF),
        float((c >> 8) & 0xFF),
        float(c & 0xFF),
        0
    );

    for(highp float id = min_y; id <= max_y;id++){
        for(highp float jd = min_x; jd <= max_x; jd++){

            highp float i = clamp(id,0,push.screen_height-1);
            highp float j = clamp(jd,0,push.screen_width-1);
            

            // if(i < 0. || i >= push.screen_height || j < 0. || j >= push.screen_width){
            //     continue;
            // }

            uint int_i = int(i);
            uint int_j = int(j);


            vec2 pixel_pos = vec2(j,i);


            highp float alpha = get_determinant(v0.xy, v1.xy,pixel_pos);
            highp float beta = get_determinant(v1.xy,v2.xy,pixel_pos);
            highp float omega = get_determinant(v2.xy,v0.xy,pixel_pos);


            if(alpha<0. || beta < 0. || omega <0.){
                continue;
            }

            highp float intermediate_depth = v0[3] + ((i - v0[1]) * dz_dy) + ((j - v0[0]) * dz_dx);


            /*
            CURRENTLY CONVERTING TO ATOMIC


            */

         
            // race condition causes severe flickering

            // CHANGE: do this operation atomically, then atomically check if depth_buf.depth[id] == intermediate_depth, when drawing
            // reduces framerate quite a bit, but produces a better output

            // if(depth_buffer.data[int_i * int(push.screen_width) + int_j] < floatBitsToUint(intermediate_depth)){
            //     continue;
            // }else{
            //     depth_buffer.data[int_i * int(push.screen_width) + int_j] = floatBitsToUint(intermediate_depth);
            // }

            
            atomicMin(depth_buffer.data[int_i * int(push.screen_width) + int_j], floatBitsToUint(intermediate_depth));

            if (depth_buffer.data[int_i * int(push.screen_width) + int_j] == floatBitsToUint(intermediate_depth)){
            vec4 to_write = color / 255;
            to_write *= light_intensity;
            ivec2 coord = ivec2(int_j,int_i);
            imageStore(img, coord, to_write);   
                continue;
            }
            
            
            // vec4 to_write = color / 255;
            // to_write *= light_intensity;
            // ivec2 coord = ivec2(int_j,int_i);
            // imageStore(img, coord, to_write);   
            // ivec2 coord2 = ivec2(int_j,int_i+1);
            // imageStore(img, coord2, to_write);   
            // ivec2 coord3 = ivec2(int_j+1,int_i);
            // imageStore(img, coord3, to_write);   
            // ivec2 coord4 = ivec2(int_j+1,int_i+1);
            // imageStore(img, coord4, to_write);   

        }
    }
}

float calculate_intensity(vec3 normal){
    float ambient_light = 0.3;

    float final_intensity = ambient_light;

    uint idx = gl_GlobalInvocationID.x;
    uint idy = gl_GlobalInvocationID.y;
    uint id = idx * 16 + idy;

    int num_points = 2;
    // assuming point lights
    for(int i=0;i<num_points;i++){
        vec3 vec_to_face = point_light_data.data[i].xyz - initial_vertex_data.data[id].xyz;

        highp float vec_dot = dot(vec_to_face,normal);
        highp float combined_magnitudes = length(vec_to_face) * length(normal);
        highp float intensity_scalar = vec_dot / combined_magnitudes;
        intensity_scalar = max(intensity_scalar,0.);

        final_intensity += intensity_scalar;
        if(final_intensity>=1.){
            return 1.;
        }
    }

    return min(final_intensity,1.);
}


void draw_triangle(uint v_a_idx, uint v_b_idx, uint v_c_idx, uint face_id, vec3 normal){

    vec4 va = floor(transformed_vertex_data.data[v_a_idx]);
    vec4 vb = floor(transformed_vertex_data.data[v_b_idx]);
    vec4 vc = floor(transformed_vertex_data.data[v_c_idx]);

    vec4 inp[3];
    inp[0] = va;
    inp[1] = vb;     
    inp[2] = vc;

    vec3 float_normal = vec3(normal);
    
    vec4 outp[3];

    sort_counter_clockwise(inp,outp);

    vec4 v0 = outp[0];
    vec4 v1 = outp[1];
    vec4 v2 = outp[2];



    // manually define a point light at 0,0,0;
    // highp float initial_intensity = 1.0;
    // vec3 directional_light = vec3(1.,1.,1.);

    // vec3 reflected_light = -1. * directional_light;

    // highp float vec_dot = dot(float_normal, reflected_light);
    // highp float combined_magnitudes = length(float_normal) * length(reflected_light);
    // highp float intensity_scalar = vec_dot / combined_magnitudes;

    // intensity_scalar = max(intensity_scalar,0.);
    // // if(intensity_scalar<0){
    // //     intensity_scalar = 0.;
    // // }

    // highp float intermediate_intensity = initial_intensity * intensity_scalar; // this is final intensity if we have now ambient light
    // highp float final_intensity = min(intermediate_intensity + 0.3,1.); // add in some ambient light

    highp float final_intensity = calculate_intensity(float_normal);

    draw_full_half_space_triangle(v0, v1, v2, face_id, final_intensity);

    return;

}



void main() {

   // highp float t = push.current_heading[0];
    //highp float q = push.current_position[0];

    vec4 li = point_light_data.data[0];


    uint idx = gl_GlobalInvocationID.x;
    uint idy = gl_GlobalInvocationID.y;

    // yes i understand the following lines are redundant and inefficient, it is for testing
    uint id = idx * 16 + idy;
    uvec4 face = faces.ids[id]; // get face

    if(in_view.data[face[3]]==0){ // return early if not in view
        return;
    }


    // get the indices of each vertex, factoring in offset from how we store the data
    uint v_0_idx = face[0] + running_vertice_count.data[face[3]];
    uint v_1_idx = face[1] + running_vertice_count.data[face[3]];
    uint v_2_idx = face[2] + running_vertice_count.data[face[3]];


    

    vec3 face_normal = normalize(normal_buffer.data[id].xyz);

            // take in the vertex buffer
    vec3 cam_position = vec3(-push.x, -push.y, -push.z);
    vec3 face_v0 = initial_vertex_data.data[v_0_idx].xyz;
    float normal_dot = dot(normalize(face_v0 - cam_position), face_normal);
    //float normal_dot = (face_normal.x * push.heading_x) + (face_normal.y * push.heading_y) + (face_normal.z * push.heading_z);

    if(normal_dot >= 0. ){
        return;
    }


    // if(normal_dot < 0 ){
    //     // the 0.5 comes from - view.fov / 2
    //     // definitely not the right way to do it

    //     // this WILL be changed eventually
    //     return;
    // }


    draw_triangle(v_0_idx,v_1_idx,v_2_idx,face[3],face_normal);

}


#version 460


layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;



layout(push_constant) uniform PushConstants {
    float screen_width;
    float screen_height;
} push;

layout(set = 0, binding = 0) buffer Vertices {
    vec4 data[];
} vertices;

layout(set = 0, binding = 1) buffer TransformedVertices {
    vec4 data[];
} transformed_vertices;

layout(set = 0, binding = 2) uniform Transform {
    mat4 transformMatrix;
} transform;

void main() {
    uint idx = gl_GlobalInvocationID.x;
    vec4 d = transformed_vertices.data[idx];

    transformed_vertices.data[idx] = transform.transformMatrix * vertices.data[idx];

    if(transformed_vertices.data[idx][3] != 0){
        transformed_vertices.data[idx][0] /= transformed_vertices.data[idx][3];
        transformed_vertices.data[idx][1] /= transformed_vertices.data[idx][3];
        transformed_vertices.data[idx][2] /= transformed_vertices.data[idx][3];
    }

    transformed_vertices.data[idx][0] = push.screen_width * (transformed_vertices.data[idx][0] + 1.) / 2.;
    transformed_vertices.data[idx][1] = push.screen_height * (1. - transformed_vertices.data[idx][1]) / 2.;
}
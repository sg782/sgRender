#version 460


layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;



layout(push_constant) uniform PushConstants {
    float screen_width;
    float screen_height;
} push;

layout(set = 0, binding = 0) buffer Data {
    vec4 data[];
} buf;

layout(set = 0, binding = 1) buffer VertexDepth {
    float data[];
} depth_buf;

layout(set = 0, binding = 2) uniform Transform {
    mat4 transformMatrix;
} transform;

void main() {
    uint idx = gl_GlobalInvocationID.x;
    depth_buf.data[idx] = 1.;

    buf.data[idx] = transform.transformMatrix * buf.data[idx];

    if(buf.data[idx][3] != 0){
        buf.data[idx][0] /= buf.data[idx][3];
        buf.data[idx][1] /= buf.data[idx][3];
        buf.data[idx][2] /= buf.data[idx][3];

    }

    buf.data[idx][0] = push.screen_width * (buf.data[idx][0] + 1.) / 2.;
    buf.data[idx][1] = push.screen_height * (1. - buf.data[idx][1]) / 2.;


}
#version 460


layout(local_size_x = 16, local_size_y = 16) in;


struct BoundingPoint {
    vec3 min;  // Aligned to 16 bytes (vec3 is 12 bytes, but padded to 16)
    float padding1; // Explicit padding to match Rust struct
    vec3 max;  // Aligned to 16 bytes (vec3 is 12 bytes, but padded to 16)
    float padding2; // Explicit padding to match Rust struct
};

struct Plane {
    vec3 normal;  // Normal vector (x, y, z)
    float distance;  // Plane distance
};

struct FrustumFaces {
    Plane faces[6];  // Array of 6 planes
};

layout(std430, binding = 0) buffer BoundingBoxBuffer {
    BoundingPoint bounding_boxes[];
} bounding_buffer;

layout(std140, binding = 1) uniform FrustumBuffer {
    FrustumFaces frustum;
}frustum_faces;

layout(std430, binding = 2) buffer InView {
    uint data[];
} in_view;




int is_inside_plane(Plane plane, vec3 point){

    // if normal - distance <= 0
    float dot = dot(plane.normal,point);

    if(dot <= plane.distance){
        return 1;
    }

    return 0;
}

void main() {


    uint idx = gl_GlobalInvocationID.x;
    uint idy = gl_GlobalInvocationID.y;

    //uint id = idx * 16 + idy;
    uint id = idy * gl_NumWorkGroups.x * gl_WorkGroupSize.x + idx;

    vec3 a = bounding_buffer.bounding_boxes[id].min; // min point
    vec3 b = bounding_buffer.bounding_boxes[id].max; // max point


    for(int i=0;i<6;i++){
        int all_points_outside = 1;
        Plane p = frustum_faces.frustum.faces[i];

        // manually define each point for simplicity
        vec3 points[8];
        
        points[0] = vec3(a[0],a[1],a[2]);
        points[1] = vec3(a[0],a[1],b[2]);
        points[2] = vec3(a[0],b[1],a[2]);
        points[3] = vec3(a[0],b[1],b[2]);
        points[4] = vec3(b[0],a[1],a[2]);
        points[5] = vec3(b[0],a[1],b[2]);
        points[6] = vec3(b[0],b[1],a[2]);
        points[7] = vec3(b[0],b[1],b[2]);



        for(int i=0;i<8;i++){
            if(is_inside_plane(p,points[i])==1){
                all_points_outside = 0;
                break;
            }
        }

        if(all_points_outside == 1) {
            in_view.data[id] = 0;
            return;
        }
    }

    in_view.data[id] = 1;

}



